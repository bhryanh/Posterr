// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Posterr.Infrastructure.Data;

#nullable disable

namespace Posterr.Infrastructure.Data.Migrations
{
    [DbContext(typeof(PosterrDbContext))]
    [Migration("20251029125411_CreateUserAndPostTables")]
    partial class CreateUserAndPostTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Posterr.Domain.Entities.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(777)
                        .HasColumnType("character varying(777)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRepost")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("OriginalPostId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("OriginalPostId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            AuthorId = new Guid("11111111-1111-1111-1111-111111111111"),
                            Content = "Hello Posterr! This is my first post.",
                            CreatedAt = new DateTime(2024, 12, 31, 19, 0, 0, 0, DateTimeKind.Utc),
                            IsRepost = false
                        },
                        new
                        {
                            Id = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            AuthorId = new Guid("22222222-2222-2222-2222-222222222222"),
                            Content = "Just joined Posterr! Excited to be here.",
                            CreatedAt = new DateTime(2024, 12, 31, 20, 0, 0, 0, DateTimeKind.Utc),
                            IsRepost = false
                        },
                        new
                        {
                            Id = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            AuthorId = new Guid("33333333-3333-3333-3333-333333333333"),
                            Content = "This is a great platform!",
                            CreatedAt = new DateTime(2024, 12, 31, 21, 0, 0, 0, DateTimeKind.Utc),
                            IsRepost = false
                        },
                        new
                        {
                            Id = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            AuthorId = new Guid("44444444-4444-4444-4444-444444444444"),
                            Content = "Hello Posterr! This is my first post.",
                            CreatedAt = new DateTime(2024, 12, 31, 22, 0, 0, 0, DateTimeKind.Utc),
                            IsRepost = true,
                            OriginalPostId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa")
                        });
                });

            modelBuilder.Entity("Posterr.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedAt = new DateTime(2024, 12, 2, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserName = "bhryan"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            CreatedAt = new DateTime(2024, 12, 7, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserName = "barney"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            CreatedAt = new DateTime(2024, 12, 12, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserName = "sergey"
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            CreatedAt = new DateTime(2024, 12, 17, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserName = "daisy"
                        });
                });

            modelBuilder.Entity("Posterr.Domain.Entities.Post", b =>
                {
                    b.HasOne("Posterr.Domain.Entities.User", "Author")
                        .WithMany("Posts")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Posterr.Domain.Entities.Post", "OriginalPost")
                        .WithMany("Reposts")
                        .HasForeignKey("OriginalPostId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Author");

                    b.Navigation("OriginalPost");
                });

            modelBuilder.Entity("Posterr.Domain.Entities.Post", b =>
                {
                    b.Navigation("Reposts");
                });

            modelBuilder.Entity("Posterr.Domain.Entities.User", b =>
                {
                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
